import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.util.Map;

public class Main {
    public static void main(String[] args) {

        //loop to 2 billion then from -2 billion and stop
//        int x = 0;
//        do {
//            System.out.println(x);
//            x++;
//        } while (x != 0);
//        System.out.println("done");

//        Map<String,String> names = Map.of("Fred","Jones","Sheila","Smith");
//
//        for (String f : names.values()){
//            System.out.println(f);
//        }

//        outer:
//        for (int i = 0; i < 4; i++) {
//            inner:
//            for (int j = 0; j < 4; j++) {
//                if (i == j)
//                    break inner; /* same as continue outer as long as there is are statements after the inner block */
//                System.out.println(i + ", " + j + " - ");
//            }
//            System.out.println("It will show up in break inner or break but not in continue outer");
//        }


        superblock:
        {
            int x = 0;
            outer:
            while (x < 5) {
                System.out.println(x);
                inner:
                switch (x) {
                    case 0:
                        x = 1;
                        break inner;
                    case 1:
                        x = 3;//no break will provoke a fall through to the next case with a break or yield statement
                    case 2:
                        x = 4;
                        break;
                    case 3:
                        continue outer;
                    case 4:
                        x = 5;
                        break outer;
                }
                System.out.println("X");
            }
        }

        //Resources used within a try block will be closed automatically
        // at the finally block autogenerated by the compiler,
        // those resources will be closed in the reverse order they were listed
        // in the try declaration section and not in the order they were created
        autocloseablefirst:
        {
            System.out.println("Starting");
            MyResource mr0 = new MyResource();

            try (MyResource mr1 = new MyResource(); mr0; MyResource mr2 = new MyResource()) {
                System.out.println("Using resources");
                if (Math.random() > 0.5) {
                    System.out.println("Throwing FNFE in main try block");
                    throw new FileNotFoundException("fnfe!");
                }
            } catch (Throwable t) {
                System.out.println("Primary problem " + t.getMessage());
                for (Throwable st : t.getSuppressed()) {
                    System.out.println(" + surppressed: " + st.getMessage());
                }
            }
            //mr0 = null; // this cant be done since the variables listed must be final or effective final
            System.out.println("Ending");
        }
    }

    public void cookWithGrapes() throws SourGrapesException {
    }

    public void eatFruit() throws UninvitingFruitException {
    }

    //    Multi-catch block exceptions must be disjoint class meaning they must not be in the same hierarchy (parent-son)
    public void useFruits() throws UninvitingFruitException {
        try {
            cookWithGrapes();
            eatFruit();
        } catch (SourGrapesException e) {

        }
    }
}

class MyResource implements AutoCloseable {
    private static int nextId = 0;
    private final int id = nextId++;

    {
        System.out.println("initializing MyResource id=" + id);
    }

    @Override
    public void close() throws SQLException {
        System.out.println("Closing id=" + id);
        if (Math.random() > 0.5) {
            System.out.println(" - Failing close of " + id);
            throw new SQLException("Closing failed for id " + id);
        }
        System.out.println(" - Closed " + id + " successfully");
    }
}

class UninvitingFruitException extends Exception {
}

class SourGrapesException extends UninvitingFruitException {
}